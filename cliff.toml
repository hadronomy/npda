# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "hadronomy"
repo = "PR1-IA-2425"

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
      {% if commit.breaking %}[**breaking**] {% endif %}\
      {{ commit.message | upper_first }} - \
      ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
	## Whats Changed in [{{ version | trim_start_matches(pat="v") }}]\
	{% if previous %}\
		{% if previous.version %}\
			({{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }})\
		{% else %}\
			({{ self::remote_url() }}/tree/{{ version }})\
		{% endif %}\
	{% endif %} \
  🔄
{% else %}\
	# [unreleased]
{% endif %}\

{% for group, commits in commits
| filter(attribute="merge_commit", value=false)
| unique(attribute="message")
| group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/hadronomy/PR1-IA-2425" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "(?i)^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "(?i)^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "(?i)^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "(?i)^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "(?i)^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "(?i)^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "(?i)^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "(?i)^chore", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "(?i)^upgrade", group = "<!-- 9 -->⬆️ Upgrades" },
  { message = "(?i)^downgrade", group = "<!-- 10 -->⬇️ Downgrades" },
  { message = "(?i)^revert", group = "<!-- 11 -->⏪ Reverts" },
  # { message = "(?i)^release", group = "<!-- 12 -->🔖 Releases" },
  { message = "(?i)^bump", group = "<!-- 13 -->📦 Bumps" },
  { message = "(?i)^initial", group = "<!-- 14 -->🎉 Initial Commit" },
  { message = "(?i)^init", group = "<!-- 15 -->🎉 Initial Commit" },
  { message = "(?i)^add", group = "<!-- 16 -->➕ Add" },
  { message = "(?i)^create", group = "<!-- 16 -->➕ Add" },
  { message = "(?i)^remove", group = "<!-- 17 -->➖ Remove" },
  { message = "(?i)^delete", group = "<!-- 17 -->➖ Remove" },
  { message = "(?i)^rename", group = "<!-- 18 -->📝 Rename" },
  { message = "(?i)^move", group = "<!-- 19 -->📂 Move" },
  { message = "(?i)^copy", group = "<!-- 20 -->📋 Copy" },
  { message = "(?i)^fixup", group = "<!-- 21 -->🔧 Fixup" },
  { message = "(?i)^wip", group = "<!-- 22 -->🚧 WIP" },
  { message = "(?i)^rework", group = "<!-- 23 -->🔨 Rework" },
  { message = "(?i)^cleanup", group = "<!-- 24 -->🧹 Cleanup" },
  { message = "(?i)^format", group = "<!-- 25 -->🎨 Format" },
  { message = "(?i)^style", group = "<!-- 25 -->🎨 Format" },
  { message = "(?i)^lint", group = "<!-- 25 -->🎨 Format" },
  { message = "(?i)^update", group = "<!-- 26 -->🔄 Update" },
  { message = "(?i)^pin", group = "<!-- 27 -->📌 Pin" },
  { message = "(?i)^unpin", group = "<!-- 28 -->📍 Unpin" },
  { message = "(?i)^build|ci|cd", group = "<!-- 29 -->👷 CI/CD" },
  { message = ".*", group = "<!-- 30 -->📝 Other" },
  { message = "(?i)^merge", group = "<!-- 31 -->🔀 Merges" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"